#!/usr/bin/env node
var Neodoc = require("neodoc")
var concat = Array.prototype.concat.bind(Array.prototype)
var VERSION = require("../package").version
var AUTHOR_NAME = require("../package").author.name
var AUTHOR_EMAIL = require("../package").author.email

var USAGE_TEXT = `
Usage: hades [options] [<command> [<args>...]]

Options:
    -h, --help             Display this help and exit.
    -V, --version          Display version and exit.

Commands:
    asic                   Create an ASiC-E file.
    certificate            Print information on certificate.
    ocsp                   Check certificate validity via OCSP.
    ts                     Query the timestamp server.
    tsl                    Get the European Trust Service List.
    mobile-id-certificate  Get the certificate associated with a phone number.
    mobile-id-sign         Sign a file with Mobile-Id.
    smart-id-certificate   Get the certificate associated with a person.
    smart-id-sign          Sign a file with Smart-Id.
    validate               Validates the signature XML created by Undersign.

For more help or to give feedback, please contact ${AUTHOR_EMAIL}.
`.trimLeft()

var VERSION_TEXT = `
Mark of Hades.js v${VERSION}
Copyright (c) 2019â€“ ${AUTHOR_NAME} <${AUTHOR_EMAIL}>
For more help or to give feedback, please contact ${AUTHOR_EMAIL}.
`.trimLeft()

var args = Neodoc.run(USAGE_TEXT, {optionsFirst: true, versionFlags: []})
if (args["--help"]) return void process.stdout.write(USAGE_TEXT)
if (args["--version"]) return void process.stdout.write(VERSION_TEXT)

var cmd = args["<command>"]
if (cmd == null) return void process.stdout.write(USAGE_TEXT)

var FetchError = require("fetch-error")
var EMPTY_ARR = Array.prototype

var CLIS = {
	asic: "../cli/asic_cli",
	certificate: "../cli/certificate_cli",
	ocsp: "../cli/ocsp_cli",
	ts: "../cli/ts_cli",
	tsl: "../cli/tsl_cli",
	validate: "../cli/validate_cli",
	"mobile-id-certificate": "../cli/mobile_id_certificate_cli",
	"mobile-id-sign": "../cli/mobile_id_sign_cli",
	"smart-id-certificate": "../cli/smart_id_certificate_cli",
	"smart-id-sign": "../cli/smart_id_sign_cli"
}

if (CLIS[cmd] == null) {
	console.warn(`hades: No such command: ${cmd}`)
	process.exitCode = 1
	return
}

var res = require(CLIS[cmd])(concat(cmd, args["<args>"] || EMPTY_ARR))
Promise.resolve(res).catch(function(err) {
	console.error(err.name + ": " + err.message)
	var stack = err.stack.replace(/^[^\n]+\n?/, "")
	if (stack) console.error(stack)

	if (err instanceof FetchError) {
		var req = err.request
		var res = err.response

		if (req) {
			console.warn("%s %s", req.method, req.url)
			console.warn("Request Headers:", req.headers)
			if (req.body) console.warn("Request Body:", req.body)
		}

		if (res) {
			console.warn("Response Headers:", res.headers)
			console.warn("Response Body:", res.body)
		}
	}

	process.exitCode = 2
})
